#!groovy

node {

    properties([disableConcurrentBuilds()])

    // this disallows running multiple jobs for same branch at once


    String targetEnv = ""
    String tags = ""

    try {
        targetEnv = params.TARGET_ENV?.trim()
        tags = params.TAGS?.trim()


        echo """Parameters:
        tags: '${tags}'
    targetEnv: '${targetEnv}'
"""

        stage("Pull Source") {
//trying to get the hash without checkout gets the hash set in previous build.
            def checkout = checkout scm
            env.COMMIT_HASH = checkout.GIT_COMMIT
            echo "Checkout done; Hash: '${env.COMMIT_HASH}'"
        }

        stage("Setup infrastructure in Azure"){

            // Run ansible to create resource groups
            //sh "ansible-playbook ansible/setupinfra.yaml --inventory ansible/inventories/mscdevops/mscdevops_inventory.yaml --extra-vars \"host_key_checking=False env=${targetEnv} location=westeurope ssh_port=22 --become-user=root\" --vault-password-file /var/lib/jenkins/secrets/ansible_vault -e 'ansible_python_interpreter=/usr/bin/python3' --tags 'createRg'"
            sh "ansible-playbook ansible/setupinfra.yaml --inventory ansible/inventories/mscdevops/mscdevops_inventory.yaml --extra-vars \"host_key_checking=False env=mscdevops location=westeurope ssh_port=22\" --vault-password-file ansible_vault -e 'ansible_python_interpreter=/usr/bin/python3' --tags '${tags}'"
        }

    } catch (e) {
        throw e
    } finally {
        cleanWs()
        echo "Build done."
    }
}
