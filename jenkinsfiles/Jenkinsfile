#!groovy

node {

    properties([disableConcurrentBuilds()])

    // this disallows running multiple jobs for same branch at once

    def mainBranches = [:]
    mainBranches["master"] = [labelFormat: "jaz-{VERSION_TAG}"]

    String branchName = ""
    String buildLabel = ""
    String targetEnv = ""

    try {

        branchName = params.BRANCH?.trim()?.replaceFirst("origin/", "")
        buildLabel = params.BUILD_LABEL?.trim()
        targetEnv = params.TARGET_ENV?.trim()


        if (!branchName) {
            error("No branch name was given!")
        }

        echo """Parameters:
    branchName: '${branchName}' 
    buildLabel: '${buildLabel}' 
    targetEnv: '${targetEnv}'
"""

        stage("Pull Source") {
//trying to get the hash without checkout gets the hash set in previous build.
            def checkout = checkout scm
            env.COMMIT_HASH = checkout.GIT_COMMIT
            echo "Checkout done; Hash: '${env.COMMIT_HASH}'"
        }

        stage("Setup infrastructure in Azure"){

            // Run ansible to create resource groups
            sh "sudo ansible-playbook ansible/setupinfra.yaml --inventory ansible/inventories/mscdevops/mscdevops_inventory.yaml --extra-vars \"host_key_checking=False env=${targetEnv} location=westeurope ssh_port=22\" --vault-password-file /var/lib/jenkins/secrets/ansible_vault -e 'ansible_python_interpreter=/usr/bin/python3' --tags 'createRg'"

        }

    } catch (e) {
        throw e
    } finally {
        echo "Build done."
    }
}
