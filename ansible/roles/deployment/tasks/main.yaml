---
- name: Include vars from deploy file
  include_vars:
    file: "{{ aksPath }}/{{ env }}/{{ appName }}/deploy.yaml"
    name: aksDeploy

- name: Remove kubectl config
  file:
    path: "/home/bcadmin/.kube/config"
    state: absent
    
- name: Set kubernetes context
  command: az account set -s "{{ azureSubId }}"
  delegate_to: localhost

- name: Set aks into context
  set_fact:
    aks: "{{ aks.name }}"
    rgName: "{{ aks.rg }}"

- name: Set kubernetes context
  command: az aks get-credentials --overwrite-existing --resource-group "{{ aks.rg }}" --name "{{ aks.name }}"

- name: Service update
  shell: "{{ kubectl }} apply -f {{ aksPath }}/{{ env }}/{{ appName }}/service.yaml"
  when: svc == 'true'

- name: Check if deployment exist
  shell: "{{ kubectl }} get deployments | grep -o {{ aksDeploy.metadata.name }}"
  register: deployment
  ignore_errors: yes

- name: Delete deployment "{{ deployment.stdout }}"
  shell: "{{ kubectl }} delete deployment {{ aksDeploy.metadata.name }}"
  when: deployment is defined
  ignore_errors: yes

- name: Check container status
  shell: "{{ kubectl }} get pods | grep {{ aksDeploy.metadata.name }}"
  register: status
  until: (aksDeploy.metadata.name in status.stdout)
  delay: 1
  retries: 5
  ignore_errors: yes

# - name: Set build version
#   replace:
#     path: "{{ aksPath }}/{{ env }}/{{ appName }}/deploy.yaml"
#     regexp: '#BUILD#'
#     replace: '{{ build }}'
#     backup: no

- name: Run "{{ appName }}" container
  shell: "{{ kubectl }} apply -f {{ aksPath }}/{{ env }}/{{ appName }}/deploy.yaml"

- name: Check container status
  shell: "{{ kubectl }} get pods | grep {{ aksDeploy.metadata.name }}"
  register: status
  until: ("Running" in status.stdout)
  delay: 5
  retries: 15

# - name: Reset build version
#   replace:
#     path: "{{ aksPath }}/{{ env }}/{{ appName }}/deploy.yaml"
#     regexp: '{{ build }}'
#     replace: '#BUILD#'
#     backup: no

